# 3.11 임의의 요소 뽑기
import random

values = [1, 2, 3, 4, 5, 6]
random.choice(values)
random.sample(values, 2)
random.sample(values, 3)
random.shuffle(values)
values
random.randint(0, 10)  # 0-10 랜덤추출
random.random()
random.getrandbits(100)


# 3.12 시간 단위 변환
from datetime import timedelta

a = timedelta(days=2, hours=6)
b = timedelta(hours=4.5)
c = a + b
c.days
c.seconds
c.seconds / 3600
c.total_seconds() / 3600

from datetime import datetime

a = datetime(2012, 9, 23)
print(a + timedelta(days=10))

b = datetime(2012, 12, 21)
d = b – a  
d.days

now = datetime.today()
print(now)

print(now + timedelta(minutes=10)) 

a = datetime(2012, 3, 1)
b = datetime(2012, 2, 28)
a - b
(a - b).days

c = datetime(2013, 3, 1)
d = datetime(2013, 2, 28)
(c - d).days

# 3.13 마지막 금요일 날짜 구하기
from datetime import datetime, timedelta

weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday',
            'Friday', 'Saturday', 'Sunday']


def get_previous_byday(dayname, start_date=None):
    if start_date is None:
        start_date = datetime.today()
    day_num = start_date.weekday()
    day_num_target = weekdays.index(dayname)
    days_ago = (7 + day_num - day_num_target) % 7
    if days_ago == 0:
        days_ago = 7
    target_date = start_date - timedelta(days=days_ago)
    return target_date


datetime.today()

get_previous_byday('Monday')

get_previous_byday('Tuesday')

get_previous_byday('Friday')

from datetime import datetime
from dateutil.relativedelta import relativedelta
from dateutil.rrule import *

d = datetime.now()
print(d)

print(d + relativedelta(weekday=FR))

print(d + relativedelta(weekday=FR(-1)))

# 3.14 현재 달의 날짜범위 찾기
from datetime import datetime, date, timedelta
import calendar


def get_month_range(start_date=None):
    if start_date is None:
        start_date = date.today().replace(day=1)
    _, days_in_month = calendar.monthrange(start_date.year, start_date.month)
    end_date = start_date + timedelta(days=days_in_month)
    return (start_date, end_date)


a_day = timedelta(days=1)
first_day, last_day = get_month_range()
while first_day < last_day:
    print(first_day)
    first_day += a_day

# 3.15 문자열을 시간으로 변환
from datetime import datetime

text = '2012-09-20'
y = datetime.strptime(text, '%Y-%m-%d')
z = datetime.now()
diff = z - y
diff

z
nice_z = datetime.strftime(z, '%A %B %d, %Y')
nice_z

# 3.16 시간대 관련 날짜처리
from datetime import datetime
from pytz import timezone

d = datetime(2012, 12, 21, 9, 30, 0)
print(d)

# 현지화
central = timezone('US/Central')
loc_d = central.localize(d)
print(loc_d)


bang_d = loc_d.astimezone(timezone('Asia/Kolkata'))
print(bang_d)

# 4.1 수동으로 이터레이터 소비
items = [1, 2, 3]

it = iter(items)

next(it)

next(it)

next(it)

next(it)



# 4.2 델리게이팅 순환

class Node:
    def __init__(self, value):
        self._value = value
        self._children = []

    def __repr__(self):
        return 'Node({!r})'.format(self._value)

    def add_child(self, node):
        self._children.append(node)

    def __iter__(self):
        return iter(self._children)


if __name__ == '__main__':
    root = Node(0)
    child1 = Node(1)
    child2 = Node(2)
    root.add_child(child1)
    root.add_child(child2)
    for ch in root:
        print(ch)


# 4.3 제너레이터로 새로운 순환 패턴 생성

def frange(start, stop, increment):
    x = start
    while x < stop:
        yield x
        x += increment


for n in frange(0, 4, 0.5): 
    print(n)


def countdown(n):
    print('Starting to count from', n)
    while n > 0:
        yield n
        n -= 1
        print('Done!')


c = countdown(3)
next(c) 


# 4.4 이터레이터 프로토콜 구현

class Node:
    def __init__(self, value):
        self._value = value
        self._children = []

    def __repr__(self):
        return 'Node({!r})'.format(self._value)

    def add_child(self, node):
        self._children.append(node)

    def __iter__(self):
        return iter(self._children)

    def depth_first(self):
        yield self
        for c in self:
            yield from c.depth_first()


if __name__ == '__main__':
    root = Node(0)
    child1 = Node(1)
    child2 = Node(2)
    root.add_child(child1)
    root.add_child(child2)
    child1.add_child(Node(3))
    child1.add_child(Node(4))
    child2.add_child(Node(5))

for ch in root.depth_first():
    print(ch)


class Node:
    def __init__(self, value):
        self._value = value
        self._children = []

    def __repr__(self):
        return 'Node({!r})'.format(self._value)

    def add_child(self, other_node):
        self._children.append(other_node)

    def __iter__(self):
        return iter(self._children)

    def depth_first(self):
        return DepthFirstIterator(self)


class DepthFirstIterator(object):
    '''
    Depth-first traversal
    '''

    def __init__(self, start_node):
        self._node = start_node
        self._children_iter = None
        self._child_iter = None

    def __iter__(self):
        return self

    def __next__(self):
        if self._children_iter is None:
            self._children_iter = iter(self._node)
            return self._node
        elif self._child_iter:
            try:
                nextchild = next(self._child_iter)
                return nextchild
            except StopIteration:
                self._child_iter = None
                return next(self)

        else:
            self._child_iter = next(self._children_iter).depth_first()
            return next(self)


# 4.5 역방향 순환
a = [1, 2, 3, 4]

for i in reversed(a):
    print(i)

# 4.6추가 상태를 가진 제너레이터 함수 정의
from collections import deque


class linehistory:
    def __init__(self, lines, histlen=3):
        self.lines = lines
        self.history = deque(maxlen=histlen)

    def __iter__(self):
        for lineno, line in enumerate(self.lines, 1):
            self.history.append((lineno, line))
            yield line

    def clear(self):
        self.history.clear()


with open('d:/data/somefile.txt') as f:
    lines = linehistory(f)
    for line in lines:
        if 'python' in line:
            for lineno, hline in lines.history:
                print('{}:{}'.format(lineno, hline), end='')

f = open('d:/data/somefile.txt')
lines = linehistory(f)
next(lines)

f = open('d:/data/somefile.txt')
lines = linehistory(f)
it = iter(lines)
next(it)


