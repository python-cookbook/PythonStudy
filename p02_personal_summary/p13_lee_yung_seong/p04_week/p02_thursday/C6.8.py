#관계형 데이터베이스 작업
#문제
#관계형 데이터베이스에 선택,삽입,행 삭제 등의 작업을 하고 싶다.
#해결
#파이썬에서 데이터 행을 나타내는 표준은 튜플 시퀀스이다.
stocks = [
    ('GOOG',100,490.1),
    ('AAPL',50,545.75),
    ('FB',150,7.45),
    ('HPQ',75,33.2)
]
#주어진 형식을 통해 파이썬의 표준 데이터베이스 API를 사용하면 관계형 데이터베이스 작업을 하는 것은 간단하다.
#자세한 내용은 pep249
#입력이나 출력 데이터의 행은 튜플로 표현한다.
#예시를 위해서 파이썬의 sqlite3 모듈을 사용한다. 다른 데이터베이스를 이용한다면 서드파티 모듈을 설치해야함.

#DB연결
import sqlite3
db = sqlite3.connect('database.db')

#데이터 관련 작업을 하기 위해서는 커서를 만들어야 함. 커서를 만든 후에 SQL 쿼리를 실행할 수 있다.
c=db.cursor()
c.execute('create table portfolio (symbol text,shares integer, price real)')
db.commit()

#데이터에 행의 시퀀스를 삽입하려면 다음 구문
c.executemany('insert into portfolio values (?,?,?)',stocks)
db.commit()
#쿼리를 수행하려면
for row in db.execute('select * from portfolio'):
    print(row)
#사용자가 입력한 파라미터를 받는 쿼리를 수행하려면 ?를 사용해 파라미터를 이스케이핑해야함.
min_price = 100
for row in db.execute('select * from portfolio where price >=?',(min_price,)):
    print(row)
#토론
#하위 레벨에서 데이터베이스 작업하기는 지극히 단순. 단순히 sql 구문을 만들고 관련 모듈을 넣어서 데이터베이스를 갱신하거나 자료를 받아 오면 됨.
#하지만 경우에 따라 신경을 써야 하는 복잡한 상황이 없지는 않다.
#예로 데이터 베이스 자료를 파이썬 타입에 매핑할 때 발생한다. 날짜와 같은 자료를 저장할 때 datetime 모듈의 datetime 인스턴스나 타임스탬프를 사용하는 것이 일반적
#그리고 금융 자료와 같이 숫자를 저장할 때는 decimal 모듈의 decimal 인스턴슬를 사용하는 경우가 많다. 하지만 이에 대한 정확한 매핑은 데이터베이스 백엔드에 따라 달라직 ㅣ때문에 관련 문서를 잘 읽어야함.
#또 한가지는 sql 구문 문자여르이 서식화. 절대로 파이썬의 서식화 연산자나 format 메소드로 문자열을 만들면 안됨.
#sql injection당함.
#쿼리의 와일드카드? 는 데이터베이스에게 안전한 벡엔드 문자열 치환식을 사용하라고 지시.
#데이터베이스 백엔드간 와일드카드에 대해 불일치 사항이 존재함. 문서를 잘 읽어봐야...
#DB 테이블에서 간단히 자료를 넣었다 뺐다 하는 정도라면 데이터베이스 api를 사용하는것으로 충분하지만 복잡한 작업할 시에는 객체 관계형 매퍼등이 제공하는 상위 레벨 인터페이스를
#사용하는 것이 더 이치에 맞음.
#sqlalchemy와 같은 라이브러리는 데이터베이스 테이블을 파이썬 클래스로 표현하게 해 주고 기반 sql을 숨긴 상태로 데이터베이스 작업을 하도록 도와준다.