#3.2 정확한 10진수 계산
#정확한 10진수 계산을 해야하고 부동 소수점을 사용할 때 발생하는 작은 오류를 피하고 싶다.
#해결 부동 소수점 값에는 10진수를 아주 정확히 표현하지 못한다는 문제가 있다. 심지어 아주 작은 계산을 하더라도 오류가 발생하기도 한다.
a=4.2
b=2.1
a+b
(a+b)==6.3
#정확한 계산(성능을 희생해야함)
from decimal import Decimal
a = Decimal('4.2')
b = Decimal('2.1')
a+b
#숫자를 문자열로 표현하는 모듈. 하지만 decimal은 우리가 기대하는 모든 동작(숫자계산포함)을 정확히 수행한다.
#문자열 서식화 함수에 사용하거나 출력하면 마치 일반적인 숫자인 것처럼 보인다.
#decimal의 중요한 기능으로 반올림의 자릿수와 같은 계산적 측면을 조절할 수 있다는 점이 있다.
a = Decimal('1.3')
b = Decimal('1.7')
print(a/b)
with localcontext() as ctx:
    ctx.prec =3
    print(a/b)
#토론
#과학, 공학, 컴퓨터 그래픽등 자연 과학 영역은 부동 소수점 값이 일반적. 작은 오류는 무시해도 될만한 수준이다.
#float이 decimal보다 훨씬 빠름.
#그렇다고 해서 오류를 완전히 무시할 수는 없음. 수학자들은 다양한 알고리즘을 연구하며 많은 시간을 투자했고
#어떤 것은 다른 것보다 오류처리를 잘 한다. 또한 아주 크고 작은 숫자를 더할 때 발생하는 오류도 조심해야 한다.
nums = [1.23e+18,1,-1.23e+18]
sum(nums)
import math
math.fsum(nums) #더 정확함
#금융과 같은 숫자계산이 철저해야 하는 곳은 decimal을 사용하는 것이 유리.
