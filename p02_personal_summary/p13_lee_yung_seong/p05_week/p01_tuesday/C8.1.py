#인스턴스의 문자열 표현식 변형
#문제
#인스턴스를 출력하거나 볼 때 생성되는 결과물을 좀 더 보기 좋게 바꾸고 싶다.
#해결
#인스턴스의 문자열 표현식을 바꾸려면 __str__()와 __repr__() 메소드를 정의한다.
class Pair:
    def __init__(self,x,y):
        self.x=x
        self.y=y
    def __repr__(self):
        return 'Pair({0.x!r},{0.y!r})'.format(self)
    def __str__(self):
        return '({0.x!s},{0.y!s})'.format(self)

#repr 메소드는 인스턴스의 코드 표현식을 반환하고 일반적으로 인스턴스를 재생성할 때 입력하는 텍스트
#내장 repr함수는 인터프리터에서 값을 조사할 때와 마찬가지로 이 텍스트를 반환한다.
#__str__() 메소드는 인스턴스를 문자열로 변환하고, str()와 print()함수가 출력하는 결과가 된다.
p=Pair(3,4)
p
#Pair(3,4) #repr 결과
print(p)
#(3,4) #str 결과
#이번 레시피의 코드는 서식화에서 문자열 표현식이 어떻게 다르닞도 보여준다.
#특히 서식화 코드 !r은 기본 값으로 __str__()대신 __repr__()를 사용해야 함을 가리킨다. 앞에 나온 클래스로 시험가능
p = Pair(3,4)
print('p is {0!r}'.format(p))
#p is Pair(3,4)
print('p is {0}'.format(p))
#p is (3,4)
#토론
#repr과 str을 정의하면 디버깅과 인스턴스 출력을 간소화
#예를 들어 단지 출력이나 인스턴스로깅을 할 때에도 프로그래머는 인스턴스 내용에 대해 더 유용한 정보를 얻을 수 있다
#repr은 eval(repr(x)) ==x 와 같은 텍스트를 만드는 것이 표준이다.
#이것을 원하지 않거나 불가능 하다면 일반적으로 <와> 사이에 텍스트를 넣는다
f = open('file.dat')
f
#str()을 정의하지 않으면 대신 repr의 결과물을 사용한다.
#format() 을 사용한점이 별로일지 모르지만 서식코드는 인자의 0의 x 속성을 명시한다.