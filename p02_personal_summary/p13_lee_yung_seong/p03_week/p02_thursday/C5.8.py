#고정크기 레코드 순환
#문제
#파일을 줄 단위로 순환하지 않고, 크기를 지정해서 그 단위별로 순환하고 싶다.
#해결
#iter, functools.partial()
from functools import partial
record_size = 32
with open('somefile.data','rb') as f:
    records = iter(partial(f.read, record_size),b'')
    for r in records:
        ...
#이 예제의 records 객체는 파일의 마지막에 도달할 때 까지 고정 크기 데이터를 생산하는 순환객체이다.
#하지만 파일의 크기가 지정한 크기의 정확한 배수가 아닌경우 마지막 아이템의 크기가 예상보다 작을 수 있다.
#토론
#iter()함수에 잘 알려지지 않은 기능으로, 호출 가능 객체와 종료 값을 전달하면 이터레이터를 만드는 것이 있다. 그 이터레이터는 제공받은 호출가능 객체를 반복적으로 호출하며
#종료값을 반환할 때 순환을 멈춘다.
#이 해결책에서 functools.partial로 파일에서 고정 크기 바이트를 읽어 호출 가능 객체를 생성했다. 파일을 읽었지만 마지막에 도달 했다면 종료 값인 b''를 반환한다.
#마지막으로 이 예제에서 파일을 바이너리 모드로 열었음에 주목하자. 고정크기 레코드를 읽기 위해서 이것이 가장 일반적이다. 텍스트 파일의 경경우는 줄 단위로 읽는 경우가 더 많다