#서로 다른 컨테이너 아이템 순환
#문제
#여러 객체에 동일한 작업을 수행해야 하지만, 객체가 서로 다른 컨테이너에 들어 있다. 하지만 중첩된 반복문을 사용해 코드의 가독성을 해치고 싶지 않다.
#해결
#itertools.chain()으로. 이 메소드는 순환 가능한 객체를 리스트로 받고 마스킹을 통해 한번에 순환할 수 있는 이터레이터 반환한다.
from itertools import chain
a = [1,2,3,4]
b = ['x','y','z']
for x in chain(a,b):
    print(x)

#chain()은 일반적으로 모든 아이템에 동일한 작업을 수행하고 싶지만 이 아이템이 서로 다른 세트에 포함되어 있을 때 사용한다.
active_item = set()
incative_items = set()

for item in chain(active_item,incative_items):#이런식으로 for문을 나눠서 쓰지 않고 작업이 가능하다.,
    #작업
    print(item)

#토론
#chain()은 하나 혹은 그 이상의 순환 객체를 인자로 받는다. 그리고 입력 받은 순환 객체 속 아이템을 차례대로 순환하는 이터레이터를 생성한다.
#큰 차이는 아니지만 우선적으로 시퀀스를 하나로 합치 다음 순환하는 것보다 chain()을 사용하는 것이 더 효율적이다.
