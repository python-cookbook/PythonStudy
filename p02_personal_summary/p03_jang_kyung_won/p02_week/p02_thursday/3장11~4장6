# 3.11 임의의 요소 뽑기
import random

values = [1, 2, 3, 4, 5, 6]
random.choice(values)

# 임의의 아이템 N개 뽑아서 적용하려면
random.sample(values, 2)
random.sample(values, 3)

# 아이템을 무작위로 섞으려면
random.shuffle(values)
values

# 임의의 정수 생성은
random.randint(0, 10)  # 0 ~ 10(포함)까지의 무작위로 출력 한다

# 0과1 사이의 균등 부동 소수점 값 생성
random.random()

# N비트로 표현된 정수 만들기
random.getrandbits(100)

# 3.12 시간 단위 변환
from datetime import timedelta

a = timedelta(days=2, hours=6)
b = timedelta(hours=4.5)
c = a + b
c.days
c.seconds
c.seconds / 3600
c.total_seconds() / 3600

from datetime import datetime

a = datetime(2012, 9, 23)
print(a + timedelta(days=10))  # a의 날짜에서 10일을 더 한 날이 언젠지 출력

b = datetime(2012, 12, 21)
d = b – a  # b의 날짜에서 a의 날자를 뺀 날 수를 출력
d.days

now = datetime.today()  # 오늘 날짜와 시간 출력
print(now)

print(now + timedelta(minutes=10))  # 오늘 날짜와 시간에서 10분을 더해서 출력print(now + timedelta(days=10)) # 오늘 날짜에서 10일을 더해서 출력

# datetime은 윤년을 인식한다.
a = datetime(2012, 3, 1)
b = datetime(2012, 2, 28)  # 12년은 2월은 29일까지 있음
a - b
(a - b).days

c = datetime(2013, 3, 1)
d = datetime(2013, 2, 28)  # 13년 2월은 28일까지 있음
(c - d).days

# 3.13 마지막 금요일 날짜 구하기
from datetime import datetime, timedelta

weekdays = ['Monday', 'Tuesday', 'Wednesday', 'Thursday',
            'Friday', 'Saturday', 'Sunday']


def get_previous_byday(dayname, start_date=None):
    if start_date is None:
        start_date = datetime.today()
    day_num = start_date.weekday()
    day_num_target = weekdays.index(dayname)
    days_ago = (7 + day_num - day_num_target) % 7
    if days_ago == 0:
        days_ago = 7
    target_date = start_date - timedelta(days=days_ago)
    return target_date


datetime.today()

get_previous_byday('Monday')

get_previous_byday('Tuesday')

get_previous_byday('Friday')

from datetime import datetime
from dateutil.relativedelta import relativedelta
from dateutil.rrule import *

d = datetime.now()
print(d)  # 지금 날짜와 시간

print(d + relativedelta(weekday=FR))  # 다음 금요일

print(d + relativedelta(weekday=FR(-1)))  # FR(-1)이전 금요일 숫자에 따라 정해짐

# 3.14 현재 달의 날짜범위 찾기
from datetime import datetime, date, timedelta
import calendar


def get_month_range(start_date=None):
    if start_date is None:
        start_date = date.today().replace(day=1)  # 현재 날짜의 day를 1일로 바꿈
    _, days_in_month = calendar.monthrange(start_date.year, start_date.month)
    end_date = start_date + timedelta(days=days_in_month)
    return (start_date, end_date)


a_day = timedelta(days=1)  # 2로 바꾸면 2일 단위로 나옴.
first_day, last_day = get_month_range()
while first_day < last_day:
    print(first_day)
    first_day += a_day

# 3.15 문자열을 시간으로 변환
from datetime import datetime

text = '2012-09-20'
y = datetime.strptime(text, '%Y-%m-%d')
z = datetime.now()
diff = z - y
diff

z
nice_z = datetime.strftime(z, '%A %B %d, %Y')
nice_z

# 3.16 시간대 관련 날짜처리
from datetime import datetime
from pytz import timezone

d = datetime(2012, 12, 21, 9, 30, 0)
print(d)

# 시카고에 맞게 현지화
central = timezone('US/Central')
loc_d = central.localize(d)
print(loc_d)

# 방갈로 시간으로 변환
bang_d = loc_d.astimezone(timezone('Asia/Kolkata'))
print(bang_d)

# 4.1 수동으로 이터레이터 소비
items = [1, 2, 3]

it = iter(items)

next(it)

next(it)

next(it)

next(it)  # items에 1,2,3 세 개의 요소가 있기 때문에 네 번째는 에러가 난다.

# 4.2 델리게이팅 순환


class Node:
    def __init__(self, value):
        self._value = value
        self._children = []

    def __repr__(self):
        return 'Node({!r})'.format(self._value)

    def add_child(self, node):
        self._children.append(node)

    def __iter__(self):
        return iter(self._children)


if __name__ == '__main__':
    root = Node(0)
    child1 = Node(1)
    child2 = Node(2)
    root.add_child(child1)
    root.add_child(child2)
    for ch in root:
        print(ch)

# 4.3 제너레이터로 새로운 순환 패턴 생성


def frange(start, stop, increment):
    x = start
    while x < stop:
        yield x
        x += increment


for n in frange(0, 4, 0.5):  # 0부터 0.5씩 더해서 출력하면서 4 이하까지만
    print(n)


def countdown(n):
    print('Starting to count from', n)  # 시작할 때 n의 숫자와 같이 출력
    while n > 0:
        yield n
        n -= 1
        print('Done!')  # 출력 할 때 마다 Done! 출력


c = countdown(3)
next(c)  # 3부터 출력해서 1까지 출력 한다. 1까지 출력하고 에러가 난다.

# 4.4 이터레이터 프로토콜 구현


class Node:
    def __init__(self, value):
        self._value = value
        self._children = []

    def __repr__(self):
        return 'Node({!r})'.format(self._value)

    def add_child(self, node):
        self._children.append(node)

    def __iter__(self):
        return iter(self._children)

    def depth_first(self):
        yield self
        for c in self:
            yield from c.depth_first()


if __name__ == '__main__':
    root = Node(0)
    child1 = Node(1)
    child2 = Node(2)
    root.add_child(child1)
    root.add_child(child2)
    child1.add_child(Node(3))
    child1.add_child(Node(4))
    child2.add_child(Node(5))

for ch in root.depth_first():
    print(ch)


class Node:
    def __init__(self, value):
        self._value = value
        self._children = []

    def __repr__(self):
        return 'Node({!r})'.format(self._value)

    def add_child(self, other_node):
        self._children.append(other_node)

    def __iter__(self):
        return iter(self._children)

    def depth_first(self):
        return DepthFirstIterator(self)


class DepthFirstIterator(object):
    '''
    Depth-first traversal
    '''

    def __init__(self, start_node):
        self._node = start_node
        self._children_iter = None
        self._child_iter = None

    def __iter__(self):
        return self

    def __next__(self):
        if self._children_iter is None:
            self._children_iter = iter(self._node)
            return self._node
        elif self._child_iter:
            try:
                nextchild = next(self._child_iter)
                return nextchild
            except StopIteration:
                self._child_iter = None
                return next(self)

        else:
            self._child_iter = next(self._children_iter).depth_first()
            return next(self)


# 4.5 역방향 순환
a = [1, 2, 3, 4]

for x in reversed(a):
    print(x)

# 4.6추가 상태를 가진 제너레이터 함수 정의
from collections import deque


class linehistory:
    def __init__(self, lines, histlen=3):
        self.lines = lines
        self.history = deque(maxlen=histlen)

    def __iter__(self):
        for lineno, line in enumerate(self.lines, 1):
            self.history.append((lineno, line))
            yield line

    def clear(self):
        self.history.clear()


with open('d:/data/somefile.txt') as f:
    lines = linehistory(f)
    for line in lines:
        if 'python' in line:
            for lineno, hline in lines.history:
                print('{}:{}'.format(lineno, hline), end='')

f = open('d:/data/somefile.txt')
lines = linehistory(f)
next(lines)

f = open('d:/data/somefile.txt')
lines = linehistory(f)
it = iter(lines)
next(it)  # 마지막 문장을 출력하고 더 출력하려면 에러가 난다.



