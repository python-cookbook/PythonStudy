# 2.17 HTML과 XML 엔티티 처리
s = 'Elements are written as "<tag>text</tag>".'
import html
print(s)

print(html.escape(s))

print(html.escape(s,quote=False)) # "는 남겨두도록 지정

s = 'Spicy jalapeño'
s.encode('ascii',errors='xmlcharrefreplace')

s = 'Spicy &quot;jalape&#241;o&quot.'
from html.parser import HTMLParser
p = HTMLParser()
p.unescape(s)

t = 'The prompt is &gt;&gt;&gt;'
from xml.sax.saxutils import unescape
unescape(t)



# 2.18 텍스트 토큰화
text ='foo = 23 + 42 * 10'
tokens = [('NAME','foo'),('EQ','='),('NUM','23'),('PLUS','+'),('NUM','42')
          ,('TIMES','*'),('NUM', '10')]
import re
NAME = r'(?P<NAME>[a-zA-Z_][a-zA-Z_0-9]*)'
NUM  = r'(?P<NUM>\d+)'
PLUS = r'(?P<PLUS>\+)'
TIMES = r'(?P<TIMES>\*)'
EQ    = r'(?P<EQ>=)'
WS    = r'(?P<WS>\s+)'
         
from collections import namedtuple
master_pat = re.compile('|'.join([NAME, NUM, PLUS, TIMES, EQ, WS]))
Token = namedtuple('Token', ['type','value'])
def generate_tokens(pat, text):
    scanner = pat.scanner(text)
    for m in iter(scanner.match, None):
        yield Token(m.lastgroup, m.group())
for tok in generate_tokens(master_pat, 'foo = 42'):
    print(tok)





# 2.19 간단한 재귀 파서 작성
import re
import collections

NUM    = r'(?P<NUM>\d+)'
PLUS   = r'(?P<PLUS>\+)'
MINUS  = r'(?P<MINUS>-)'
TIMES  = r'(?P<TIMES>\*)'
DIVIDE = r'(?P<DIVIDE>/)'
LPAREN = r'(?P<LPAREN>\()'
RPAREN = r'(?P<RPAREN>\))'
WS     = r'(?P<WS>\s+)'

master_pat = re.compile('|'.join([NUM, PLUS, MINUS, TIMES, 
                                  DIVIDE, LPAREN, RPAREN, WS]))

Token = collections.namedtuple('Token', ['type','value'])

def generate_tokens(text):
    scanner = master_pat.scanner(text)
    for m in iter(scanner.match, None):
        tok = Token(m.lastgroup, m.group())
        if tok.type != 'WS':
            yield tok

class ExpressionEvaluator:
    '''
    Implementation of a recursive descent parser.   Each method
    implements a single grammar rule.  Use the ._accept() method
    to test and accept the current lookahead token.  Use the ._expect()
    method to exactly match and discard the next token on on the input
    (or raise a SyntaxError if it doesn't match).
    '''

    def parse(self,text):
        self.tokens = generate_tokens(text)
        self.tok = None             
        self.nexttok = None         
        self._advance()             
        return self.expr()

    def _advance(self):
        'Advance one token ahead'
        self.tok, self.nexttok = self.nexttok, next(self.tokens, None)

    def _accept(self,toktype):
        'Test and consume the next token if it matches toktype'
        if self.nexttok and self.nexttok.type == toktype:
            self._advance()
            return True
        else:
            return False

    def _expect(self,toktype):
        'Consume next token if it matches toktype or raise SyntaxError'
        if not self._accept(toktype):
            raise SyntaxError('Expected ' + toktype)

    

    def expr(self):
        "expression ::= term { ('+'|'-') term }*"

        exprval = self.term()
        while self._accept('PLUS') or self._accept('MINUS'):
            op = self.tok.type
            right = self.term()
            if op == 'PLUS':
                exprval += right
            elif op == 'MINUS':
                exprval -= right
        return exprval
    
    def term(self):
        "term ::= factor { ('*'|'/') factor }*"

        termval = self.factor()
        while self._accept('TIMES') or self._accept('DIVIDE'):
            op = self.tok.type
            right = self.factor()
            if op == 'TIMES':
                termval *= right
            elif op == 'DIVIDE':
                termval /= right
        return termval

    def factor(self):
        "factor ::= NUM | ( expr )"

        if self._accept('NUM'):
            return int(self.tok.value)
        elif self._accept('LPAREN'):
            exprval = self.expr()
            self._expect('RPAREN')
            return exprval
        else:
            raise SyntaxError('Expected NUMBER or LPAREN')

if __name__ == '__main__':
    e = ExpressionEvaluator()
    print(e.parse('2'))
    print(e.parse('2 + 3'))
    print(e.parse('2 + 3 * 4'))
    print(e.parse('2 + (3 + 4) * 5'))



class ExpressionTreeBuilder(ExpressionEvaluator):
    def expr(self):
        "expression ::= term { ('+'|'-') term }"

        exprval = self.term()
        while self._accept('PLUS') or self._accept('MINUS'):
            op = self.tok.type
            right = self.term()
            if op == 'PLUS':
                exprval = ('+', exprval, right)
            elif op == 'MINUS':
                exprval = ('-', exprval, right)
        return exprval
    
    def term(self):
        "term ::= factor { ('*'|'/') factor }"

        termval = self.factor()
        while self._accept('TIMES') or self._accept('DIVIDE'):
            op = self.tok.type
            right = self.factor()
            if op == 'TIMES':
                termval = ('*', termval, right)
            elif op == 'DIVIDE':
                termval = ('/', termval, right)
        return termval

    def factor(self):
        'factor ::= NUM | ( expr )'

        if self._accept('NUM'):
            return int(self.tok.value)
        elif self._accept('LPAREN'):
            exprval = self.expr()
            self._expect('RPAREN')
            return exprval
        else:
            raise SyntaxError('Expected NUMBER or LPAREN')

if __name__ == '__main__':
    e = ExpressionTreeBuilder()
    print(e.parse('2 + 3'))
    print(e.parse('2 + 3 * 4'))
    print(e.parse('2 + (3 + 4) * 5'))
    print(e.parse('2 + 3 + 4'))

from ply.lex import lex
from ply.yacc import yacc

tokens = [ 'NUM', 'PLUS', 'MINUS', 'TIMES', 'DIVIDE', 'LPAREN', 'RPAREN' ]

t_ignore = ' \t\n'

t_PLUS   = r'\+'
t_MINUS  = r'-'
t_TIMES  = r'\*'
t_DIVIDE = r'/'
t_LPAREN = r'\('
t_RPAREN = r'\)'

def t_NUM(t):
    r'\d+'
    t.value = int(t.value)
    return t

def t_error(t):
    print('Bad character: {!r}'.format(t.value[0]))
    t.skip(1)

lexer = lex()

def p_expr(p):
    '''
    expr : expr PLUS term
         | expr MINUS term
    '''
    if p[2] == '+':
        p[0] = p[1] + p[3]
    elif p[2] == '-':
        p[0] = p[1] - p[3]

def p_expr_term(p):
    '''
    expr : term
    '''
    p[0] = p[1]

def p_term(p):
    '''
    term : term TIMES factor
         | term DIVIDE factor
    '''
    if p[2] == '*':
        p[0] = p[1] * p[3]
    elif p[2] == '/':
        p[0] = p[1] / p[3]

def p_term_factor(p):
    '''
    term : factor
    '''
    p[0] = p[1]

def p_factor(p):
    '''
    factor : NUM
    '''
    p[0] = p[1]

def p_factor_group(p):
    '''
    factor : LPAREN expr RPAREN
    '''
    p[0] = p[2]

def p_error(p):
    print('Syntax error')

parser = yacc()

if __name__ == '__main__':
    print(parser.parse('2'))
    print(parser.parse('2+3'))
    print(parser.parse('2+(3+4)*5'))
# 2.20 바이트 문자열에 텍스트 연산 수행
data = b'Hello World'
data[0:5]


data.startswith(b'Hello')
data.split()

data.replace(b'Hello',b'Hello Curel')

# bytearray로도 똑같이 실행 가능하다.
data = bytearray(b'Hello World')
data[0:5]
data.startswith(b'Hello')

data = b'FOO:BAR,SPAM'
import re
re.split('[:,]',data)

re.split(b'[:,]',data)

# 바이트 문자열은 서식화 지원하지 않는다.
s = b'Hello World'
print(s)
print(s.decode('ascii'))





# 3.1 반올림
round(1.23, 1)
round(1.27, 1)
round(-1.27, 1)
round(1.25361,3)

a = 1627731
round(a, -1)

#숫자의 의미는 수의 위치이다.
#1 6 2 7 7 3 1 . 3 5 2 2 4
#     ...  -2–1 0 1 2 ...
x = 1.23456
format(x, '0.2f') # 소수점 2자리까지 끊어서 반올림
format(x, '0.3f') # 소수점 3자리까지 끊어서 반올림
'value is {:0.3f}'.format(x)  # format() 함수를 이용해서 소수점 3자리까지 끊어서 반올림

a = 2.1
b = 4.2
c = a + b
c
round(c,2)

# 3.2 정확한 10진수 계산
a = 4.2
b = 2.1
a + b
(a + b) == 6.3

# 왜 False가 나오는가?

# 결과 값이 정확히 6.3이 아니기 때문에 False가 나온다.
# 해결 방법은
from decimal import Decimal
a = Decimal('4.2')
b = Decimal('2.1')
a + b

(a+b) == Decimal('6.3')

from decimal import localcontext
a = Decimal('1.3')
b = Decimal('1.7')
print(a / b)

with localcontext() as ctx:
    ctx.prec = 3   # 소숫점 3자리까지 끊고 반올림 하라는 뜻
    print(a / b)



nums = [1.23e+18, 1, -1.23e+18]
sum(nums)
import math
math.fsum(nums)

# 3.3 출력을 위한 숫자 서식화
x = 1234.56789
format(x, '0.2f')
format(x, '>10.1f')  # 오른쪽 정렬
format(x, '<10.1f')  # 왼쪽 정렬

# 천 단위에 구분자 넣기
format(x,',')

# 지수 표현법을 쓰려면 f대신 e나 E를 쓰면 된다.
format(x,'e')
format(x,'0.2E')



# 3.4 2진수,8진수,16진수 작업
# 정수를 2진수,8진수,16진수 문자열로 변환하려면 bin(),oct(),hex()를 사용한다.
x = 1234
bin(x)
oct(x)
hex(x)

# 앞에 0b,0o,0x가 붙는 것이 싫으면 format() 함수를 쓰면된다.
format(x, 'b')
format(x, 'o')
format(x, 'x')

# 다른 진법의 숫자를 정수형으로 변환하려면 int() 함수에 적절한 진수를 전달한다.
int('4d2', 16)
int('10011010010', 2)

# 3.9 큰 배열 계산
x = [1, 2, 3, 4]
x*2
# 각각 2씩 곱해주려면 Numpy 모듈을 사용하면 된다.
import numpy as np
ax = np.array([1, 2, 3, 4])
ay = np.array([5, 6, 7, 8])
ax * 2

ax + 10
ax + ay
ax * ay

# Numpy가 파이썬의 리스트, 그 중에서도 다차원 배열의 인덱싱 기능을 확장하고 있다는 점을 특히 주목해야 한다.
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
a

a[1] # a의 1번째 요소 
a[:,1] # 각 요소의 1번째 요소

a[1:3, 1:3]  # a의 1,2번째 요소의 1번째부터 3번째 전까지 출력

a[1:3, 1:3] += 10
a
a + [100, 101, 102, 103]
a







np.where(a < 10, a, 10) # a의 요소중에 10보다 크면 10으로 출력해라

# 3.10 행렬과 선형 대수 계산
import numpy as np
m = np.matrix([[1,-2,3],[0,4,5],[7,8,-9]])
m

# 전치 행렬
m.T

# 역행렬
m.I

# 벡터를 만들고 곱하기
v = np.matrix([[2],[3],[4]])
v


m*v

# numpy.linalg 서브패키지에 더 많은 연산이 있다.
import numpy.linalg
numpy.linalg.det(m)
numpy.linalg.eigvals(m)
x = numpy.linalg.solve(m, v)
x
m * x
v

