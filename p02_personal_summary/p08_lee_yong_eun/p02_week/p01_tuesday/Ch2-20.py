####################################################################################################
# 2.20] 바이트 문자열에 텍스트 연산 수행
#   * 바이트 문자열에 일반적인 텍스트 연산(잘라내기, 검색, 치환 등)을 수행하고 싶다.
#
#   * 텍스트보다 바이트로 데이터를 다루는 것이 빠른 것은 사실이지만,
#     이렇게 하면 코드가 매우 지저분하고 이해하기 어려워지며,
#     인코딩/디코딩 수작업, 다른 부분과의 혼용 시 문제 발생 등 문제점이 많다.
#     그냥 텍스트 문자열 쓰자.
####################################################################################################

### 아래 둘 중 어느 data를 써도 동일한 결과를 얻을 수 있다.
## byte string
data = b'Hello World'

## byte array
data = bytearray(b'Hello World')

res = data[0:5]
print(res)  # b'Hello'

res = data.startswith(b'Hello')
print(res)  # True

res = data.split()
print(res)  # [b'Hello', b'World']

## 일반 문자열과의 차이
## 1. 인덱스를 사용하면 개별 문자가 아니라 정수를 가리킨다 !
print(data[0])  # 72
print(data[1])  # 101

## 2. 보기 좋은 표현식을 지원하지 않으며, 텍스트 문자열로 변환하지 않으면 깔끔하게 출력할 수도 없다.
## 3. 서식화를 지원하지 않는다.
## 4. 바이트 문자열 사용시 특정 연산의 문법에 영향을 주기도 한다. (특히 파일 시스템)