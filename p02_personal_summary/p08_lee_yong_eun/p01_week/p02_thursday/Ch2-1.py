#######################################################################################
# 2.1] 여러 구분자로 문자열 나누기
#   * 문자열을 필드로 나누고 싶지만 구분자(그리고 그 주변의 공백)가 문자열에 일관적이지 않다.
#
# 1] 정규식 사용 (re.split())
#   1-1] 분리 구문 사용 []
#       : 분리 구문을 경계로 자른 데이터들을 반환
#   1-2] 캡쳐 그룹 사용 ()
#       : 자른 데이터와 분리 구문을 함께 반환
#   1-3] 1-2의 결과에서 데이터와 분리 구문을 분리
#   1-4] ()를 쓰지만 분리 구문을 포함시키고 싶지 않을 때
#       : (?:...) 형태로 사용
#
# 참고] r'~~' : raw 문자. 전체가 정규식 문법일 때 쓸 수 있으며, escape 문자를 쓰지 않아도 된다.
#######################################################################################
import re

line = 'asdf fjdk;; afed, fjek,asdf,     foo'

# 분리 구문 사용 []
res = re.split(r'[;,\s]\s*', line)
print(res)  # ['asdf', 'fjdk', '', 'afed', 'fjek', 'asdf', 'foo']

# 캡쳐 그룹 사용 ()
fields = re.split(r'(;|,|\s)\s*', line)
print(fields)  # ['asdf', ' ', 'fjdk', ';', '', ';', 'afed', ',', 'fjek', ',', 'asdf', ',', 'foo']

# 구분 문자만 추출
values = fields[::2]    # 0,2,4,6,...번째 항목 반환 : 데이터
delimiters = fields[1::2]+ ['']    # 1,3,5,7,...번째 항목(+마지막에 '' 항목 추가) 반환 : 구분 문자
print(values)   # ['asdf', ';', 'afed', ',', 'foo']
print(delimiters)   # [' ', ';', ';', ',', ',', ',', '']

# 분리 데이터 및 구분 문자로 출력문 재구성하기
res = ''.join(v+d for v, d in zip(values, delimiters))
print(res)  # asdf fjdk;;afed,fjek,asdf,foo

# 분리 구문을 포함하지 않고 () 사용 : (?:)
res = re.split(r'(?:,|;|\s)\s*', line)
print(res)  # ['asdf', 'fjdk', '', 'afed', 'fjek', 'asdf', 'foo']
