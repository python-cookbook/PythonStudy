##########################################################################################################
# 7.8] 인자를 N개 받는 함수를 더 적은 인자로 사용
#   * 파이썬 코드에 콜백 함수나 핸들러로 사용할 호출체가 있다.
#     하지만 함수의 인자가 너무 많고, 호출했을 때 예외가 발생한다.
#       -> functools.partial()
#           : 함수의 특정 인자들을 고정시켜줌으로써 호출시 필요한 인자 수를 조정할 수 있다.
##########################################################################################################

def spam(a, b, c, d):
    print(a, b, c, d)

from functools import partial
s1 = partial(spam, 1)
s1(2, 3, 4)  # 1 2 3 4
s1(4, 5, 6) # 1 4 5 6

s2 = partial(spam, d=42)
s2(1, 2, 3) # 1 2 3 42
s2(4, 5, 6) # 4 5 6 42

s3 = partial(spam, 1, 2, d=42)
s3(3)   # 1 2 3 42


## 응용 방법 : 겉으로 보기에 호환되지 않을 것같은 코드를 함께 동작하게 해준다.
# ex) 두 점 사이의 거리 순으로 정렬 : sort의 key는 인자가 하나인 함수에만 동작하므로 이 경우엔 적합하지 않은데, partial()로 해결.
# 두 점 사이의 거리
import math
def distance(p1, p2):
    x1, y1 = p1
    x2, y2 = p2
    return math.hypot(x2 - x1, y2 - y1)

points = [(1, 2), (3, 4), (5, 6), (7, 8)]
pt = (4, 3)
points.sort(key=partial(distance,pt))   # distance의 첫 인자를 pt로 고정
print(points)   # [(3, 4), (1, 2), (5, 6), (7, 8)]
