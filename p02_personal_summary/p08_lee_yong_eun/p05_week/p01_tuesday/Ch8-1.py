##########################################################################################################
# 8.1] 인스턴스의 문자열 표현식 변형
#   * 인스턴스를 출력하거나 볼 때 생성되는 결과물을 좀 더 보기 좋게 바꾸고 싶다.
#       : __str__()과 __repr__() 메소드 정의
#           __repr__() 메소드는 인스턴스의 코드 표현식을 반환하고, 일반적으로 인스턴스를 재생성할때 입력하는 텍스트이다.
#           내장 repr() 함수는 인터프리터에서 값을 조사할 때와 마찬가지로 이 텍스트를 반환한다.
#           __str__() 메소드는 인스턴스를 문자열로 변환하고, str()과 print() 함수가 출력하는 결과가 된다.
##########################################################################################################

class Pair:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __repr__(self):
        return 'Pair({0.x!r}, {0.y!r})'.format(self)

    def __str__(self):
        return '({0.x!s}, {0.y!s})'.format(self)

p = Pair(3, 4)
p   # Pair(3, 4) -> __repr__() 결과, 인터프리터에서만 확인 가능
print(p)    # (3, 4) -> __str__() 결과

# 서식화 코드 !r은 기본 값으로 __str__() 대신 __repr__()를 사용한다.
print('p is {0!r}'.format(p))   # p is Pair(3, 4)
print('p is {0}'.format(p))     # p is (3, 4)