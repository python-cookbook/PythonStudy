##########################################################################################################
# 7.12] 클로저 내부에서 정의한 변수에 접근
#   * 클로저는 확장하여 내부 변수에 접근하고 수정하고 싶다.
#
#   * 일반적으로 클로저 내부 변수는 외부와 완전히 단절되어 있다.
#     하지만 접근 함수를 만들고 클로저에 함수 속성으로 붙이면 내부 변수에 접근할 수 있다.
#
#   * 클로저를 마치 클래스의 인스턴스인 것처럼 동작하게 만드는 방법은 Ch7.12 토론 참조
###########################################################################################################

def sample():
    n = 0
    # 클로저 함수
    def func():
        print('n=', n)

    # n에 대한 접근 메소드
    def get_n():
        return n

    def set_n(value):
        nonlocal n
        n = value

    # 함수 속성으로 클로저에 붙임
    func.get_n = get_n
    func.set_n = set_n
    return func

# 사용 예시
f = sample()
f() # n= 0

f.set_n(10)
f() # n= 10

f.get_n() # => 10


