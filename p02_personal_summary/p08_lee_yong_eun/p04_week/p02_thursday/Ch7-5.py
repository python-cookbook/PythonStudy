##########################################################################################################
# 7.5] 기본 인자를 사용하는 함수 정의
#   * 함수나 메소드를 정의할 때 하나 혹은 그 이상 인자에 기본 값을 넣어
#       선택적으로 사용할 수 있게 하고 싶다.
#
#   * 함수 기본 값 할당 시 주의해야 할 점
#       1) 할당하는 기본 값은 함수를 정의할 때 한 번만 정해지고 그 이후엔 변하지 않는다.
#       2) 기본 값으로 사용하는 값은 None, False, 숫자, 문자열같이 항상 변하지 않는 객체를 사용해야 한다.
#           특히 b=[] 등과 같은 코드는 절대 사용하지 마라!
#           이렇게 하면 기본 값이 함수를 벗어나 수정되는 순간 많은 문제가 발생한다.
#           값이 변하면 기본 값이 변하게 되고, 추후 함수 호출에 영향을 준다.
#       3) 값이 입력되었는지 확인하기 위해 기본 값을 쓸 때, 사용자가 우연히 넣을 수 없는 값을 써라.
##########################################################################################################

# 함수 기본값 정의
def spam(a, b=42):
    print(a, b)

spam(1, 2)  # 1 2
spam(1)     # 1 42

# 기본값으로 리스트 사용
def spam(a, b=None):
    if b is None:
        b = []
    pass

# 기본 값을 제공하는 대신 함수가 받은 값이 특정 값인지 아닌지 확인하는 예제
_no_value = object()
def spam(a, b=_no_value):
    if b is _no_value:
        print('No b value supplied')
        return
    print('b : ', b)

# 예제 : 'None'과 '값을 전달하지 않음'이 다르다는 것에 유의하자 !
spam(1)         # No b value supplied
spam(1, 2)      # b :  2
spam(1, None)   # b :  None


# 주의점 1 : 기본 값은 한번 정해지면 변하지 않는다.
x = 42
def spam(a, b=x):
    print(a, b)
x = 21
spam(1) # 1 42


# 주의점 2 : 다음과 같은 코드는 절대 쓰지 말 것 !
def spam(a, b=[]):
    print(b)
    return b

x = spam(1) # []
x.append(99)
x.append('Wow!')
y = spam(2) # [99, 'Wow!']