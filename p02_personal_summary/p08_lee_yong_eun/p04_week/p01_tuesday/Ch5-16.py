##########################################################################################################
# 5.16] 이미 열려 있는 파일의 인코딩을 수정하거나 추가하기
#   * 이미 열려 있는 파일을 닫지 않고 Unicode 인코딩을 추가하거나 변경하고 싶다.
#
#   * I/O 시스템은 여러 레이어로 만들어져 있다.
#     여기서 detach()는 파일의 최상단 레이어를 끊고 그 다음 레이어를 반환한다.
#       이 경우 파일의 상단 레이어는 더 이상 사용할 수 없게 되며, 대신 새로운 상단 레이어를 추가할 수 있다.
#       인코딩을 변경한 것은 이를 이용한 것이다.
#       이 기술을 라인 처리, 에러 규칙 등 파일 처리의 다른 측면에도 활용할 수 있다.
##########################################################################################################
import urllib.request
import io

## 바이너리 모드로 이미 열려 있는 파일 객체를 닫지 않고 Unicode 인코딩/디코딩을 추가하고 싶다면
#   그 객체를 io.TextIOWrapper() 객체로 감싼다.
u = urllib.request.urlopen('http://www.python.org')
f = io.TextIOWrapper(u, encoding='utf-8')
text = f.read()

## 텍스트 모드로 열린 파일의 경우, detach() 메소드로 텍스트 인코딩 레이어를 제거하고 다른 것으로 치환한다.
# sys.stdout의 인코딩을 바꾸는 방법을 보자.
# 이 코드를 실행하면 터미널의 출력이 망가질 수도 있다. 단순히 예를 위한 목적으로만 보자.
import sys
print(sys.stdout.encoding)  # UTF-8
sys.stdout = io.TextIOWrapper(sys.stdout.detach(), encoding='latin-1')
print(sys.stdout.encoding)  # latin-1

